function addRegExVal(formname, regex)
    script(type="text/javascript")
        |!
            jQuery(function($){
            $("[name=#{formname}]").change(function(e){
            that = $(this).parent();
            var field_value = that.attr("value");
            if(field_value == ""){
            that.removeClass("has-warning");
            that.removeClass("has-success");
            }else if(!field_value.match(new RegEx("#{regex}"))){
            that.addClass("has-warning");
            that.removeClass("has-success");
            }else{
            that.removeClass("has-warning");
            that.addClass("has-success");
            }
            })
            })
            
function addAutoCompleteId(instance, pathname)
    -if(instance[pathname] == null)
        -var valued = ""
    -else
        -var childmodel = instance[pathname].model(instance[pathname].constructor.modelName);
        -var valued = instance[pathname][childmodel.getDocSlug()]
    input.form-control(type="text", name=instance._id+pathname, data-provide="typeahead", autocomplete="off", value=valued)
    script(type="text/javascript")
        |!
            jQuery(function($){
            if(!autocomplete_results) window.autocomplete_results = {};
            autocomplete_results.item_#{instance._id+pathname} = [];
            $("[name=#{instance._id+pathname}]").typeahead({source:
            function(query, process){
            query = encodeURIComponent(query);
            $.ajax("/#{instance.model.modelName}/autocomplete?#{pathname}="+query)
            .done(function(data){
            autocomplete_results.item_#{instance._id+pathname} = JSON.parse(data);
            process(autocomplete_results.item_#{instance._id+pathname});
            });
            process(autocomplete_results.item_#{instance._id+pathname});
            }
            });
            });

function handleArrayForm(instance,path_val)
    p We cannot handle arrays at this point
    p it requires add->autocomplete, remove, list
/**
        input.form-control(type="text" list=instance._id+pathname+"_list" name=instance._id+pathname)
        datalist(id=instance._id+pathname+"_list")
            -for(var j=0;j<pathval.length;j++)
                option(value="Internet Explorer")
        </datalist> 
*/
function path2Text(instance, path)
    -var valued = instance[path.path]
    -var pathval = path
    -var pathname = pathval.path
    -if(pathval.caster)
        -if(valued.length > 0)
            div.dropdown
                button.btn.dropdown-toggle.sr-only(type="button" id="dropdownMenu1" data-toggle="dropdown") View Items
                    span.caret
                ul.dropdown-menu(role="menu" aria-labelledby="dropdownMenu1")
                    -for(var i=0;i<valued.length;i++)
                        li(role="presentation")
                            -if(pathval.caster.instance == "String")
                                -var set_href = ""
                                -var set_text = valued[i]
                            -else if(pathval.caster.instance == "ObjectID")
                                -var childmodel = valued[i].model(valued[i].constructor.modelName);
                                -var set_href=locals.model.utils.object2URL(valued[i])
                                -var set_text = valued[i][childmodel.getDocSlug()]
                            -else if(pathval.instance == "Number")
                                -var set_href = ""
                                -var set_text = valued[i]
                            -else if(pathval.instance == "Date")
                                -var set_href = ""
                                -var set_text = valued[i]
                            -else if(pathval.instance == "Boolean")
                                -var set_href = ""
                                -var set_text = valued[i]
                            a(role="menuitem" tabindex="-1" href=set_href)=set_text
        -else
            = "none"
    -else if(pathval.instance == "String")
        = valued
    -else if(pathval.instance == "ObjectID")
        -if(instance[pathname] == null)
            = "none"
        -else
            -var childmodel = instance[pathname].model(instance[pathname].constructor.modelName)
            -var set_href = locals.model.utils.object2URL(instance[pathname])
            -var set_text = instance[pathname][childmodel.getDocSlug()]
            a(href=set_href)= set_text
    -else if(pathval.instance == "Number")
        = valued
    -else if(pathval.instance == "Date")
        = valued
    -else if(pathval.instance == "Boolean")
        = valued
function path2Input(instance, path)
    -var valued = instance[path.path]
    -var pathval = path
    -var pathname = pathval.path
    -if(pathval.caster)
        //-we have an array
        call handleArrayForm(instance, pathval)
    -else if(pathval.instance == "String")
        -if(pathval.enumValues.length > 0)
            select.form-control
                -for(var j=0;j<pathval.enumValues.length;j++)
                    option= pathval.enumValues[j]
        -else if(pathval.regExp != null)
            div.form-group
                input.form-control(type="text" name=instance._id+pathname, value=valued)
                span.glyphicon.glyphicon-ok.form-control-feedback
                call addRegExVal(instance._id+pathname, pathval.regExp)
        -else
            input.form-control(type="text" name=instance._id+pathname value=valued)
    -else if(pathval.instance == "ObjectID")
        call addAutoCompleteId(instance, pathname)
    -else if(pathval.instance == "Number")
        div.form-group
            input.form-control(type="text" name=instance._id+pathname, value=valued)
            span.glyphicon.glyphicon-ok.form-control-feedback
            call addRegExVal(instance._id+pathname, "[0-9]+")
    -else if(pathval.instance == "Date")
        input(type="datetime-local" name=instance._id+pathname value=valued)
    -else if(pathval.instance == "Boolean")
        label.checkbox-inline
            input(type="checkbox" name=instance._id+pathname value=valued)
    -else
        p= pathval.instance